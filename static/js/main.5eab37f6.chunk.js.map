{"version":3,"sources":["components/albuns/aoVivoCCUFG_cortada.jpg","components/albuns/capaApego.jpg","components/albuns/lutreEpCapa_n.jpg","components/cardPrincipal/App.js","components/rider/Rider.js","components/bio/Bio.js","components/albuns/Albuns.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Inicio","react_default","a","createElement","className","Component","Rider","React","Bio","id","URLS","URL_YOUTUBE_APEGO","URL_YOUTUBE_CCUFG","URL_YOUTUBE_EP","URL_SPOTIFY_APEGO","URL_SPOTIFY_CCUFG","Albuns","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","abreLink","bind","assertThisInitialized","event","plataforma","target","indexOf","album","parentElement","previousElementSibling","alt","url","concat","window","open","src","capaApego","onClick","class","capaCcufg","title","capaEp","Boolean","location","hostname","match","fullpageOptions","parallax","slidesNavigation","controlArrows","Fullpage","react_fullpage_default","assign","render","_ref","state","fullpageApi","Wrapper","cardPrincipal_App","components_bio_Bio","components_albuns_Albuns","rider_Rider","ReactDOM","src_Fullpage","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yQCczBC,gMARX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,iCAAqBF,EAAAC,EAAAC,cAAA,mBAArB,cALWE,cCKNC,mLAJP,OAAQL,EAAAC,EAAAC,cAAA,2BAFII,IAAMF,WCeXG,0LAZP,OACIP,EAAAC,EAAAC,cAAA,OAAKM,GAAG,cACJR,EAAAC,EAAAC,cAAA,OAAKM,GAAG,WAAR,8EAGAR,EAAAC,EAAAC,cAAA,OAAKM,GAAG,SAAR,wBAPEF,IAAMF,sECKlBK,SAAO,CACTC,kBAAmB,8CACnBC,kBAAmB,8CACnBC,eAAgB,8CAChBC,kBAAmB,kFACnBC,kBAAmB,oFA8CRC,cAvCX,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACTC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,SAAWP,EAAKO,SAASC,KAAdP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAFPA,wEAIJU,GACL,IAAMC,EAAaD,EAAME,OAAOzB,UAAU0B,QAAQ,WAAa,EAVvD,UACA,UAUFC,EAAQJ,EAAME,OAAOG,cAAcC,uBAAuBC,IAC1DC,EAAG,OAAAC,OAAUR,EAAV,KAAAQ,OAAwBL,GAEjCM,OAAOC,KAAK5B,EAAKyB,GAAM,2CAGvB,OACIlC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAK+B,IAAI,QAAQ9B,UAAU,QAAQK,GAAG,YAAY8B,IAAKC,MACvDvC,EAAAC,EAAAC,cAAA,OAAKM,GAAG,sBACJR,EAAAC,EAAAC,cAAA,KAAGsC,QAASrB,KAAKI,SAAUkB,MAAM,mBACjCzC,EAAAC,EAAAC,cAAA,KAAGsC,QAASrB,KAAKI,SAAUkB,MAAM,qBAGzCzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAK+B,IAAI,QAAQ9B,UAAU,QAAQK,GAAG,YAAY8B,IAAKI,MACvD1C,EAAAC,EAAAC,cAAA,OAAKM,GAAG,sBACJR,EAAAC,EAAAC,cAAA,KAAGyC,MAAM,oBAAiBH,QAASrB,KAAKI,SAAUkB,MAAM,mBACxDzC,EAAAC,EAAAC,cAAA,KAAGyC,MAAM,uDAAoDH,QAASrB,KAAKI,SAAUkB,MAAM,qBAGnGzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAK+B,IAAI,KAAK9B,UAAU,QAAQK,GAAG,SAAS8B,IAAKM,MACjD5C,EAAAC,EAAAC,cAAA,OAAKM,GAAG,sBACJR,EAAAC,EAAAC,cAAA,KAAGsC,QAASrB,KAAKI,SAAUkB,MAAM,6BAhCpCnC,IAAMF,WCPPyC,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,+ECPAC,EAAkB,CACpBC,UAAU,EACVC,kBAAkB,EAClBC,eAAe,GAGbC,mLAEE,OACIrD,EAAAC,EAAAC,cAACoD,EAAArD,EAADgB,OAAAsC,OAAA,GACIN,EADJ,CAEIO,OAAQ,SAAAC,GAA4BA,EAAzBC,MAAyBD,EAAlBE,YACd,OACI3D,EAAAC,EAAAC,cAACoD,EAAArD,EAAc2D,QAAf,CAAuBzD,UAAU,6BAC7BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUK,GAAG,kBAAiBR,EAAAC,EAAAC,cAAC2D,EAAD,OAC7C7D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUK,GAAG,gBAAeR,EAAAC,EAAAC,cAAC4D,EAAD,OAC3C9D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUK,GAAG,mBAAkBR,EAAAC,EAAAC,cAAC6D,EAAD,OAC9C/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUK,GAAG,kBAAiBR,EAAAC,EAAAC,cAAC8D,EAAD,mBAXlD1D,IAAMF,WAwB7B6D,IAAST,OAAOxD,EAAAC,EAAAC,cAACgE,EAAD,MAAcC,SAASC,eAAe,SDoFhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5eab37f6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/aoVivoCCUFG_cortada.0c48c534.jpg\";","module.exports = __webpack_public_path__ + \"static/media/capaApego.35a0488c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lutreEpCapa_n.ff27f97d.jpg\";","import React, { Component } from 'react';\nimport './App.css';\n\nclass Inicio extends Component {\n\n  render() {\n    return (\n      <div className=\"fp-bg App-header\">\n          <h2>Você quis dizer: <i>lustre</i> ?</h2>\n      </div>\n    );\n  }\n}\n\nexport default Inicio;","import React from 'react'\n\nclass Rider extends React.Component {\n    render() {\n        return (<div>Rider</div>)\n    }\n}\n\nexport default Rider","import React from 'react'\nimport './Bio.css'\n\nclass Bio extends React.Component {\n    render() {\n        return (\n            <div id='bioSection'>\n                <div id='bioText'>\n                    “Um plano distópico e cinzento cheio de monstros apáticos”\n            </div>\n                <div id='autor'>Leon Carelli</div>\n            </div>\n        )\n\n    }\n}\n\nexport default Bio","import React from 'react'\n\nimport capaCcufg from './aoVivoCCUFG_cortada.jpg'\nimport capaApego from './capaApego.jpg'\nimport capaEp from './lutreEpCapa_n.jpg'\n\nimport './Albuns.css'\n\nconst URLS = {\n    URL_YOUTUBE_APEGO: 'https://www.youtube.com/watch?v=GI4LNcsm59s',\n    URL_YOUTUBE_CCUFG: 'https://www.youtube.com/watch?v=1hBHt1KF8N0',\n    URL_YOUTUBE_EP: 'https://www.youtube.com/watch?v=q23XioubTIs',\n    URL_SPOTIFY_APEGO: 'https://open.spotify.com/album/5yqbFJmkoLe0d2HPz3Q2dT?si=HLpQYasTQkq8hFjaZTKzhg',\n    URL_SPOTIFY_CCUFG: 'https://open.spotify.com/album/6J95jkR9Sx8mFMysIX6YMj?si=gYNTH_3KSlKkpmsDl0ReVA',\n}\nconst SPOTIFY = 'SPOTIFY'\nconst YOUTUBE = 'YOUTUBE'\n\n\nclass Albuns extends React.Component {\n    constructor(){\n        super()\n        this.abreLink = this.abreLink.bind(this)\n    }\n    abreLink(event) {   \n        const plataforma = event.target.className.indexOf('spotify') > 0 ? SPOTIFY : YOUTUBE\n        const album = event.target.parentElement.previousElementSibling.alt\n        const url = `URL_${plataforma}_${album}` \n        debugger\n        window.open(URLS[url], '_blank');\n    }\n    render() {\n        return (\n            <div className='albunsCapas'>\n                <div className='slide'>\n                    <img alt=\"APEGO\" className='capas' id='capaApego' src={capaApego}></img>\n                    <div id='iconesRedesSociais'>\n                        <i onClick={this.abreLink} class=\"fab fa-spotify\"></i>\n                        <i onClick={this.abreLink} class=\"fab fa-youtube\"></i>\n                    </div>\n                </div>\n                <div className='slide'>\n                    <img alt=\"CCUFG\" className='capas' id='capaCcufg' src={capaCcufg}></img>\n                    <div id='iconesRedesSociais'>\n                        <i title='Álbum completo' onClick={this.abreLink} class=\"fab fa-spotify\"></i>\n                        <i title='Apenas uma música no Youtube. Completo no Spotify' onClick={this.abreLink} class=\"fab fa-youtube\"></i>\n                    </div>\n                </div>\n                <div className='slide'>\n                    <img alt=\"EP\" className='capas' id='capaEp' src={capaEp}></img>\n                    <div id='iconesRedesSociais'>\n                        <i onClick={this.abreLink} class=\"fab fa-youtube\"></i>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Albuns","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Inicio from './components/cardPrincipal/App';\nimport Rider from './components/rider/Rider';\nimport Bio from './components/bio/Bio';\nimport Albuns from './components/albuns/Albuns';\nimport * as serviceWorker from './serviceWorker';\n\nimport ReactFullpage from '@fullpage/react-fullpage';\n\nconst fullpageOptions = {\n    parallax: true,\n    slidesNavigation: true,\n    controlArrows: false,\n  };\n\nclass Fullpage extends React.Component {\n    render() {\n        return (\n            <ReactFullpage\n            {...fullpageOptions}\n                render={({ state, fullpageApi }) => {\n                    return (\n                        <ReactFullpage.Wrapper className='fp-auto-height-responsive'>\n                            <div className='section' id='incioComponent'><Inicio /></div>\n                            <div className='section' id='bioComponent'><Bio /></div>\n                            <div className='section' id='albunsComponent'><Albuns /></div>\n                            <div className='section' id='riderComponent'><Rider /></div>\n                        </ReactFullpage.Wrapper>\n                    );\n                }}\n            />\n        )\n    }\n}\n\n\n\n\n\nReactDOM.render(<Fullpage />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}